{"version":3,"sources":["js/utils.js","js/abstract-view.js","js/view/intro-view.js","js/screens/intro-screen.js","js/view/game-view.js","js/view/modal-view.js","js/screens/game-screen.js","js/game-model.js","js/view/stats-view.js","js/screens/stats-screen.js","js/application.js","js/main.js"],"names":["Table","Command","UP","RIGHT","DOWN","LEFT","KeyCode","isCommandEvent","evt","keyCode","getRandomNum","min","max","Math","floor","random","createElement","template","arguments","length","undefined","tagName","className","outer","document","classList","add","innerHTML","trim","AbstractView","this","Error","_element","render","bind","IntroView","classCallCheck","possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","_this2","nameField","element","querySelector","buttonSubmit","addEventListener","onInputChange","value","onclick","preventDefault","onFormSubmit","disabled","IntroScreen","content","_this","disableButton","enableButton","playerName","App","showGame","GameView","model","gameState","score","level","snakeCoords","foodPoint","cells","i","j","isSnake","k","Y","X","onCommandPress","buttonBack","onBackBtnClick","_getHeaderTemplate","_getCellsTemplate","ModalView","onResetClick","onContinueClick","GameScreen","root","appendChild","_interval","isModalOpen","startGame","switchCommand","key","showModal","setInterval","isFirstCommand","shouldContinue","updateView","isNextLevel","stopGame","saveResult","showStats","tick","clearInterval","_this3","view","replaceChild","_this4","modal","showIntro","remove","GameModel","myStorage","window","localStorage","command","restartGame","newPoint","getNewSnakePoint","shakeSecondPoint","_gameState","isFood","changeLevel","getNewFoodPoint","pop","unshift","newFoodPoint","oldHead","slice","newHead","assign","setItem","toString","substr","point","food","StatsView","data","_templateAllGames","forEach","index","_templateOneGame","getItem","split","push","sort","a","b","_getData","_getTemplates","StatsScreen","screenContainer","showScreen","Application","intro","init","game","stats"],"mappings":"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","file":"main.js","sourcesContent":["export const TICK_TIME = 500;\n\nexport const Table = {\n  ROW: 15,\n  COLUMN: 30\n};\n\nexport const Command = {\n  UP: `ArrowUp`,\n  RIGHT: `ArrowRight`,\n  DOWN: `ArrowDown`,\n  LEFT: `ArrowLeft`\n};\n\n\nconst KeyCode = {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40\n};\n\nconst isLeftEvent = function (evt) {\n  return evt.keyCode === KeyCode.LEFT;\n};\n\nconst isUpEvent = function (evt) {\n  return evt.keyCode === KeyCode.UP;\n};\n\nconst isRightEvent = function (evt) {\n  return evt.keyCode === KeyCode.RIGHT;\n};\n\nconst isDownEvent = function (evt) {\n  return evt.keyCode === KeyCode.DOWN;\n};\n\nexport const isCommandEvent = function (evt) {\n  return isLeftEvent(evt) || isUpEvent(evt) || isRightEvent(evt) || isDownEvent(evt);\n};\n\nexport const getRandomNum = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const createKey = function () {\n  return 'key_' + Math.random().toString(36).substr(2, 9);\n};\n\nexport const createElement = function (template = ``, tagName = `div`, className = ``) {\n  const outer = document.createElement(tagName);\n  if (className) {\n    outer.classList.add(className);\n  }\n  outer.innerHTML = template.trim();\n  return outer;\n};\n\n\n","import {createElement} from \"./utils\";\n\n\nexport default class AbstractView {\n\n  get template() {\n    throw new Error(`You have to define template for view`);\n  }\n\n  render() {\n    return createElement(this.template);\n  }\n\n  bind() {}\n\n  get element() {\n    if (!this._element) {\n      this._element = this.render();\n      this.bind();\n    }\n    return this._element;\n  }\n}\n","import AbstractView from \"../abstract-view\";\nimport {createElement} from \"../utils\";\n\nexport default class IntroView extends AbstractView {\n  constructor() {\n    super();\n  }\n\n  get template() {\n    return `\n      <h1 class=\"intro__title\">Snake</h1>\n      <p class=\"intro__description\">The player controls a snake, which picking up food, trying to avoid hitting its own tail. Each time the snake eats a piece of food, its tail grows longer. The user controls the direction of the snake's head (up, down, left, or right), and the snake's body follows. The player can not stop the snake from moving while the game is in progress, and can not make the snake go in reverse. </p>\n      <form class=\"intro__form\">\n        <input class=\"intro__input\" type=\"text\" placeholder=\"Player name\">\n        <button class=\"intro__button  continue\" type=\"submit\" disabled>Go!</button>\n      </form>`;\n  }\n\n  render() {\n    return createElement(this.template, `section` , `intro`);\n  }\n\n  bind() {\n    this.nameField = this.element.querySelector(`.intro__input`);\n    this.buttonSubmit = this.element.querySelector(`.intro__button`);\n\n    this.nameField.addEventListener(`input`, () => this.onInputChange(this.nameField.value));\n\n    this.buttonSubmit.onclick = (evt) => {\n      evt.preventDefault();\n      this.onFormSubmit(this.nameField.value);\n    };\n  }\n\n  enableButton() {\n    this.buttonSubmit.disabled = false;\n  }\n\n  disableButton() {\n    this.buttonSubmit.disabled = true;\n  }\n\n  onInputChange() {}\n\n  onFormSubmit() {}\n}\n","import IntroView from \"../view/intro-view\";\nimport App from \"../application\";\n\nexport default class IntroScreen {\n  constructor() {\n    this.content = new IntroView();\n  }\n\n  init() {\n    this.content.onInputChange = (value) => {\n      this.content.disableButton();\n      if (value !== ``) {\n        this.content.enableButton();\n      }\n    };\n\n    this.content.onFormSubmit = (playerName) => {\n      App.showGame(playerName);\n    };\n  }\n}\n\n","import AbstractView from \"../abstract-view\";\nimport {Table, createElement, isCommandEvent} from \"../utils\";\n\nexport default class GameView extends AbstractView {\n  constructor(model) {\n    super();\n    this.gameState = model.gameState;\n  }\n\n  get template() {\n    return `\n      ${this._getHeaderTemplate()}\n      <div class=\"game__table\">\n        ${this._getCellsTemplate()}\n      </div>`;\n  }\n\n  _getHeaderTemplate() {\n    return `\n      <header class=\"game__header\">\n        <button class=\"back\">\n          <img src=\"img/arrow_left.svg\" width=\"45\" height=\"45\" alt=\"Back\">\n        </button>\n        <span class=\"game__score\">Score: ${this.gameState.score}</span>\n        <span class=\"game__level\">Level: ${this.gameState.level}</span>\n      </header>`\n  }\n\n  _getCellsTemplate() {\n    const snakeCoords = this.gameState.snakeCoords;\n    const foodPoint = this.gameState.foodPoint;\n\n    let cells = ``;\n    for (let i = 1; i <= Table.ROW; i++) {\n      for (let j = 1; j <= Table.COLUMN; j++) {\n        let isSnake = false;\n        for (let k = 0; k < snakeCoords.length; k++) {\n          if (i === snakeCoords[k].Y && j === snakeCoords[k].X) {\n            isSnake = true;\n            break;\n          }\n        }\n        if (isSnake) {\n          cells += `<div class=\"game__cell game__cell--snake\">${i}, ${j}</div>`\n        } else if (foodPoint.X === j && foodPoint.Y === i) {\n          cells += `<div class=\"game__cell game__cell--food\">${i}, ${j}</div>`\n        } else {\n          cells += `<div class=\"game__cell\">${i}, ${j}</div>`\n        }\n      }\n    }\n    return cells;\n  }\n\n  render() {\n    return createElement(this.template, `div` , `game__content`);\n  }\n\n  bind() {\n    document.addEventListener('keydown', (evt) => {\n      if (isCommandEvent(evt)) {\n        this.onCommandPress(evt);\n      }\n    });\n    this.buttonBack = this.element.querySelector(`.back`);\n    this.buttonBack.addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this.onBackBtnClick();\n    })\n  }\n\n  onCommandPress() {}\n\n  onBackBtnClick() {}\n}\n","import AbstractView from \"../abstract-view\";\n\nexport default class ModalView extends AbstractView {\n  constructor() {\n    super();\n  }\n\n  get template() {\n    return `\n    <div class=\"game__modal\">\n      <h3 class=\"game__modal-question\">Do you really want to quit?</h3>\n      <p class=\"game__modal-text\">Progress in the current game will be lost!</p>\n      <button type=\"button\" class=\"game__modal-button  game__modal-button--reset\">Yes</button>\n      <button type=\"button\" class=\"game__modal-button  game__modal-button--continue\">No</button>\n    </div>`;\n  }\n\n  bind() {\n    this.element.querySelector(`.game__modal-button--reset`).addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this.onResetClick();\n    });\n    this.element.querySelector(`.game__modal-button--continue`).addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this.onContinueClick();\n    });\n  }\n\n  onResetClick() {}\n\n  onContinueClick() {}\n}\n","import App from \"../application\";\nimport GameView from \"../view/game-view\";\nimport ModalView from \"../view/modal-view\";\n\nexport default class GameScreen {\n  constructor(model) {\n    this.model = model;\n    this.content = new GameView(this.model);\n    this.root = document.createElement(`section`);\n    this.root.classList.add(`game`);\n    this.root.appendChild(this.content.element);\n    this._interval = null;\n    this.isModalOpen = false;\n  }\n\n  get element() {\n    return this.content.element;\n  }\n\n  init() {\n    this.startGame();\n    this.content.onCommandPress = (evt) => {\n      this.model.switchCommand(evt.key);\n    };\n    this.content.onBackBtnClick = () => this.showModal();\n  }\n\n  startGame() {\n    this._interval = setInterval(() => {\n      let isFirstCommand = true;\n      this.content.onCommandPress = (evt) => {\n        if (isFirstCommand) {\n          this.model.switchCommand(evt.key);\n          isFirstCommand = false;\n        }\n      };\n      if (this.model.shouldContinue()) {\n        this.updateView();\n        if (this.model.isNextLevel) {\n          this.stopGame();\n          this.startGame();\n        }\n      } else {\n        this.model.saveResult();\n        this.stopGame();\n        App.showStats();\n      }\n    }, this.model.tick);\n  }\n\n  stopGame() {\n    clearInterval(this._interval);\n  }\n\n  updateView() {\n    const view = new GameView(this.model);\n    this.root.replaceChild(view.element, this.content.element);\n    this.content = view;\n    this.content.onBackBtnClick = () => {\n      if (!this.isModalOpen) {\n        this.showModal();\n      }\n    }\n  }\n\n  showModal() {\n    this.stopGame();\n    this.isModalOpen = true;\n    const modal = new ModalView();\n    modal.onResetClick = () => {\n      App.showIntro();\n    };\n    modal.onContinueClick = () => {\n      this.startGame();\n      modal.element.remove();\n      this.isModalOpen = false;\n    };\n    this.root.appendChild(modal.element);\n  }\n\n}\n","import {TICK_TIME, Command, Table, getRandomNum, createKey} from \"./utils\";\n\nexport default class GameModel {\n  constructor(playerName) {\n    this.myStorage = window.localStorage;\n    this.playerName = playerName;\n    this.command = Command.RIGHT;\n    this.tick = TICK_TIME;\n    this.restartGame();\n  }\n\n  get gameState() {\n    return this._gameState;\n  }\n\n  switchCommand(command) {\n    const newPoint = this.getNewSnakePoint(command);\n    const shakeSecondPoint = this._gameState.snakeCoords[1];\n    if (newPoint.X === shakeSecondPoint.X && newPoint.Y === shakeSecondPoint.Y) {\n      return;\n    } else {\n      this.command = command;\n    }\n  }\n\n  shouldContinue() {\n    this.isNextLevel = false;\n    const newPoint = this.getNewSnakePoint(this.command);\n    if (this.isSnake(newPoint)) {\n      return false;\n    } else if (!this.isFood(newPoint)) {\n      this._gameState.snakeCoords.pop();\n    } else {\n      this._gameState.score += 1;\n      if (this._gameState.score % 5 === 0) {\n        this.isNextLevel = true;\n        this.changeLevel();\n      }\n      this.getNewFoodPoint();\n    }\n    this._gameState.snakeCoords.unshift(newPoint);\n    return true;\n  }\n\n  changeLevel() {\n    this._gameState.level += 1;\n    this.tick *= 0.9;\n  }\n\n  getNewFoodPoint() {\n    const newFoodPoint = {\n      X: getRandomNum(1, Table.COLUMN),\n      Y: getRandomNum(1, Table.ROW)\n    };\n    if (this.isSnake(newFoodPoint)) {\n      this.getNewFoodPoint();\n    } else {\n      this._gameState.foodPoint = newFoodPoint;\n    }\n  }\n\n  getNewSnakePoint(command) {\n    const oldHead = this._gameState.snakeCoords.slice()[0];\n    const newHead = Object.assign({}, oldHead);\n\n    switch (command) {\n      case Command.UP:\n        if (oldHead.Y === 1) {\n          newHead.Y = Table.ROW;\n          break;\n        }\n        newHead.Y -= 1;\n        break;\n      case Command.RIGHT:\n        if (oldHead.X === Table.COLUMN) {\n          newHead.X = 1;\n          break;\n        }\n        newHead.X += 1;\n        break;\n      case Command.DOWN:\n        if (oldHead.Y === Table.ROW) {\n          newHead.Y = 1;\n          break;\n        }\n        newHead.Y += 1;\n        break;\n      case Command.LEFT:\n        if (oldHead.X === 1) {\n          newHead.X = Table.COLUMN;\n          break;\n        }\n        newHead.X -= 1;\n      default:\n        break;\n    }\n    return newHead;\n  }\n\n  restartGame() {\n    this._gameState = {\n      level: 1,\n      score: 0,\n      snakeCoords: [{\n        X: 6,\n        Y: 5\n      },{\n        X: 5,\n        Y: 5\n      },{\n        X: 4,\n        Y: 5\n      }],\n      foodPoint: {\n        X: 15,\n        Y: 7\n      }\n    };\n  }\n\n  saveResult() {\n    this.myStorage.setItem(createKey(), [this.playerName, this._gameState.score]);\n  }\n\n  isSnake(point) {\n    const snakeCoords = this._gameState.snakeCoords;\n    for (let i = 0; i < snakeCoords.length; i++) {\n      if (snakeCoords[i].X === point.X && snakeCoords[i].Y === point.Y) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isFood(point) {\n    const food = this._gameState.foodPoint;\n    return (food.X === point.X && food.Y === point.Y)\n  }\n}\n","import AbstractView from \"../abstract-view\";\nimport {createElement} from \"../utils\";\n\nexport default class StatsView extends AbstractView {\n  constructor() {\n    super();\n    this.myStorage = window.localStorage;\n    this.data = [];\n    this._templateAllGames = ``;\n  }\n\n  get template() {\n    this._getData();\n    this._getTemplates();\n    return `\n    <header class=\"result__header\">\n      <button class=\"result__back back\">\n        <img src=\"img/arrow_left.svg\" width=\"45\" height=\"45\" alt=\"Back\">\n      </button>\n      <h1 class=\"result__title\">Results</h1>\n    </header>\n    <table class=\"result__table\">\n      <tr>\n        <th class=\"result__number\">#</th>\n        <th>Player</th>\n        <th class=\"result__total  result__total--final\">Score</th>\n      </tr>\n      ${this._templateAllGames}\n    </table>`;\n  }\n\n  _getTemplates() {\n    this.data.forEach((gameState, index) => {\n      this._templateAllGames += this._templateOneGame(gameState, index);\n    });\n  }\n\n  _getData() {\n    for (let i = 0; i < this.myStorage.length; i++) {\n      const key = this.myStorage.key(i);\n      const data = this.myStorage.getItem(key).split(`,`);\n      this.data.push({playerName: data[0], score: data[1]});\n    }\n    this.data.sort((a, b) => {\n      return b.score - a.score;\n    })\n  }\n\n  _templateOneGame(gameState, index) {\n    return `\n      <tr>\n        <td class=\"result__number\">${index + 1}.</td>\n        <td>${gameState.playerName}</td>\n        <td class=\"result__total  result__total--final\">${gameState.score}</td>\n      </tr>`;\n  }\n\n  render() {\n    return createElement(this.template, `section` , `result`);\n  }\n\n  bind() {\n    this.buttonBack = this.element.querySelector(`.back`);\n    this.buttonBack.addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this.onBackBtnClick();\n    })\n  }\n}\n","import App from \"./../application\";\nimport StatsView from \"../view/stats-view\";\n\nexport default class StatsScreen {\n  constructor(data) {\n    this.content = new StatsView(data);\n  }\n\n  init() {\n    this.content.onBackBtnClick = () => App.showIntro();\n  }\n}\n","import IntroScreen from \"./screens/intro-screen\";\nimport GameScreen from \"./screens/game-screen\";\nimport GameModel from \"./game-model\";\nimport StatsScreen from \"./screens/stats-screen\";\n\nconst screenContainer = document.querySelector(`.central`);\n\nconst showScreen = (element) => {\n  screenContainer.innerHTML = ``;\n  screenContainer.appendChild(element);\n};\n\nexport default class Application {\n  static showIntro() {\n    const intro = new IntroScreen();\n    showScreen(intro.content.element);\n    intro.init();\n  }\n\n  static showGame(playerName = `Anonymous Raccoon`) {\n    const game = new GameScreen(new GameModel(playerName));\n    showScreen(game.root);\n    game.init();\n  }\n\n  static showStats() {\n    const stats = new StatsScreen();\n    showScreen(stats.content.element);\n    stats.init();\n  }\n}\n","import App from \"./application\";\n\nApp.showIntro();\n"]}